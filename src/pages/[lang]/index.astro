---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { SITE_DESCRIPTION } from "../../consts";
import { getCollection, getEntry } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";

export function getStaticPaths() {
  return [{ params: { lang: "en" } }, { params: { lang: "zh" } }];
}

const { lang } = Astro.params;

// Ensure TypeScript knows the exact union type for language
const currentLang = lang as "en" | "zh";

// Fetch blog posts for current language and attach category entries to each post
const rawPosts = (await getCollection("blog"))
  .filter((post) => post.id.startsWith(lang + "/"))
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const posts = await Promise.all(
  rawPosts.map(async (post) => {
    const categoryEntries = post.data.categories
      ? (
          await Promise.all(post.data.categories.map((cat) => getEntry(cat)))
        ).filter(Boolean)
      : [];
    return { post, categoryEntries };
  })
);
---

<!doctype html>
<html lang={lang}>
  <head>
    <BaseHead description={SITE_DESCRIPTION} />
  </head>
  <body>
    <Header />
    <main class="container">
      <section class="grid grid-cols-1 md:grid-cols-2">
        {
          posts.map(({ post, categoryEntries }, index) => (
            <a
              href={`/${post.id.replace(/\.mdx?$/, "")}`}
              class={`group rounded-xl p-2 transition-colors hover:bg-gray-200 dark:hover:bg-white/10 ${index === 0 ? "md:col-span-2" : ""}`}
            >
              {post.data.heroImage && (
                <img
                  width={720}
                  height={360}
                  src={post.data.heroImage}
                  alt=""
                  class="aspect-video rounded-lg object-cover transition-transform"
                  transition:name={`${post.id}-image`}
                />
              )}
              {categoryEntries.length > 0 && (
                <ul class="-mb-1 flex flex-wrap items-start justify-start gap-2">
                  {categoryEntries.map((cat) => (
                    <li transition:name={`${post.id}-category-${cat.id}`}>
                      <span class="text-sm text-gray-500 dark:text-white/50">
                        {cat.data.name[currentLang]}
                      </span>
                    </li>
                  ))}
                </ul>
              )}
              <h4
                class="text-xl font-semibold"
                transition:name={`${post.id}-title`}
              >
                {post.data.title}
              </h4>
              <div class="text-base text-gray-500 dark:text-white/50">
                <FormattedDate date={post.data.pubDate} />
              </div>
            </a>
          ))
        }
      </section>
    </main>
    <Footer />
  </body>
</html>
