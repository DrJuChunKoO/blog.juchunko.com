---
import { getCollection, type CollectionEntry } from "astro:content";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { languages } from "../../../i18n/ui";
import type { GetStaticPaths } from "astro";
import FormattedDate from "../../../components/FormattedDate.astro";
import SocialIcon from "../../../components/SocialIcon.astro";
import { useTranslations } from "../../../i18n/utils";

type Language = keyof typeof languages;

export const getStaticPaths = (async () => {
  const authors = await getCollection("authors");
  return authors.flatMap((author) =>
    (Object.keys(languages) as Language[]).map((lang) => ({
      params: { lang, slug: author.id },
      props: { author },
    }))
  );
}) satisfies GetStaticPaths;

type Props = {
  author: CollectionEntry<"authors">;
};

const { author } = Astro.props;
const { lang } = Astro.params as { lang: Language };
const t = useTranslations(lang);

const allPosts = await getCollection("blog");

const posts = allPosts
  .filter(
    (post) =>
      post.data.author.id === author.id && post.slug.startsWith(`${lang}/`)
  )
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const authorName = author.data.name[lang];
const authorBio = author.data.bio[lang];
const socialLinks = author.data.social;
const pageTitle = `${authorName} | Author`;
const pageDescription = authorBio;
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <div
    class="flex flex-col items-center gap-2 rounded-lg bg-white p-4 dark:bg-white/5"
  >
    <img
      src={author.data.avatar}
      width={120}
      height={120}
      alt={authorName}
      class="mb-4 aspect-square rounded-full object-cover"
    />
    <h1 class="text-2xl font-semibold md:text-4xl">{authorName}</h1>
    <p>{authorBio}</p>
    {
      socialLinks && (
        <div class="mt-4 flex flex-wrap justify-center gap-4">
          {Object.entries(socialLinks).map(([name, url]) => (
            <a
              href={name === "email" ? `mailto:${url}` : url}
              target="_blank"
              rel="noopener noreferrer"
              class="text-sm text-gray-500 transition hover:text-gray-600"
            >
              <span class="sr-only">
                {t(`social.${name}` as "social.email")}
              </span>
              <SocialIcon name={name} />
            </a>
          ))}
        </div>
      )
    }
  </div>
  <div class="mt-4 flex flex-col items-start justify-start gap-4 text-left">
    <h2>{t("author.postsBy").replace("{authorName}", authorName)}</h2>
    {
      posts.map((post) => (
        <a href={`/${post.slug}`}>
          <h4 class="text-lg font-semibold">{post.data.title}</h4>
          <div class="text-sm text-gray-500">
            <FormattedDate date={post.data.pubDate} />
          </div>
        </a>
      ))
    }
  </div>
</BaseLayout>

<style>
  .author-header {
    text-align: center;
    padding: 2em 0;
  }
  .author-header img {
    border-radius: 50%;
    margin-bottom: 1em;
  }
  h2 {
    text-align: center;
    margin-top: 2em;
    margin-bottom: 1em;
    font-size: 1.5rem;
    font-weight: 600;
  }
  ul {
    list-style-type: none;
    padding: 0;
    max-width: 720px;
    margin: auto;
  }
  li {
    margin-bottom: 1em;
    text-align: center;
    border: 1px solid var(--gray-200);
    padding: 1em;
    border-radius: 8px;
  }
  li a {
    text-decoration: none;
    color: var(--text);
  }
  li a:hover {
    color: var(--accent);
  }
  li h3 {
    margin: 0 0 0.5em 0;
    font-size: 1.25rem;
  }
  .social-links {
    display: flex;
    justify-content: center;
    gap: 1em;
    margin-top: 1em;
  }
  .social-links a {
    text-decoration: none;
    color: var(--accent);
  }
  .social-links a:hover {
    color: var(--accent-dark);
  }
</style>
